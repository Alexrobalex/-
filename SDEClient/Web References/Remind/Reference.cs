//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.42000 版自动生成。
// 
#pragma warning disable 1591

namespace SDEClient.Remind {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="RemindToolsSoap", Namespace="http://SDETools/RemindTools/")]
    public partial class RemindTools : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetEngineerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRemindListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTestHospOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetUnitRangeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWorkloadGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWorkloadOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAuthorizeOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public RemindTools() {
            this.Url = global::SDEClient.Properties.Settings.Default.服务平台增强工具_Remind_RemindTools;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetEngineerCompletedEventHandler GetEngineerCompleted;
        
        /// <remarks/>
        public event GetRemindListCompletedEventHandler GetRemindListCompleted;
        
        /// <remarks/>
        public event GetDateCompletedEventHandler GetDateCompleted;
        
        /// <remarks/>
        public event GetTestHospCompletedEventHandler GetTestHospCompleted;
        
        /// <remarks/>
        public event SetUnitRangeCompletedEventHandler SetUnitRangeCompleted;
        
        /// <remarks/>
        public event GetWorkloadGroupCompletedEventHandler GetWorkloadGroupCompleted;
        
        /// <remarks/>
        public event GetWorkloadCompletedEventHandler GetWorkloadCompleted;
        
        /// <remarks/>
        public event GetAuthorizeCompletedEventHandler GetAuthorizeCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SDETools/RemindTools/GetEngineer", RequestNamespace="http://SDETools/RemindTools/", ResponseNamespace="http://SDETools/RemindTools/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetEngineer() {
            object[] results = this.Invoke("GetEngineer", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetEngineerAsync() {
            this.GetEngineerAsync(null);
        }
        
        /// <remarks/>
        public void GetEngineerAsync(object userState) {
            if ((this.GetEngineerOperationCompleted == null)) {
                this.GetEngineerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEngineerOperationCompleted);
            }
            this.InvokeAsync("GetEngineer", new object[0], this.GetEngineerOperationCompleted, userState);
        }
        
        private void OnGetEngineerOperationCompleted(object arg) {
            if ((this.GetEngineerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEngineerCompleted(this, new GetEngineerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SDETools/RemindTools/GetRemindList", RequestNamespace="http://SDETools/RemindTools/", ResponseNamespace="http://SDETools/RemindTools/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetRemindList(string EngineerName, string Date_S, string Date_E) {
            object[] results = this.Invoke("GetRemindList", new object[] {
                        EngineerName,
                        Date_S,
                        Date_E});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetRemindListAsync(string EngineerName, string Date_S, string Date_E) {
            this.GetRemindListAsync(EngineerName, Date_S, Date_E, null);
        }
        
        /// <remarks/>
        public void GetRemindListAsync(string EngineerName, string Date_S, string Date_E, object userState) {
            if ((this.GetRemindListOperationCompleted == null)) {
                this.GetRemindListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRemindListOperationCompleted);
            }
            this.InvokeAsync("GetRemindList", new object[] {
                        EngineerName,
                        Date_S,
                        Date_E}, this.GetRemindListOperationCompleted, userState);
        }
        
        private void OnGetRemindListOperationCompleted(object arg) {
            if ((this.GetRemindListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRemindListCompleted(this, new GetRemindListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SDETools/RemindTools/GetDate", RequestNamespace="http://SDETools/RemindTools/", ResponseNamespace="http://SDETools/RemindTools/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDate() {
            object[] results = this.Invoke("GetDate", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDateAsync() {
            this.GetDateAsync(null);
        }
        
        /// <remarks/>
        public void GetDateAsync(object userState) {
            if ((this.GetDateOperationCompleted == null)) {
                this.GetDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDateOperationCompleted);
            }
            this.InvokeAsync("GetDate", new object[0], this.GetDateOperationCompleted, userState);
        }
        
        private void OnGetDateOperationCompleted(object arg) {
            if ((this.GetDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDateCompleted(this, new GetDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SDETools/RemindTools/GetTestHosp", RequestNamespace="http://SDETools/RemindTools/", ResponseNamespace="http://SDETools/RemindTools/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetTestHosp() {
            object[] results = this.Invoke("GetTestHosp", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetTestHospAsync() {
            this.GetTestHospAsync(null);
        }
        
        /// <remarks/>
        public void GetTestHospAsync(object userState) {
            if ((this.GetTestHospOperationCompleted == null)) {
                this.GetTestHospOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTestHospOperationCompleted);
            }
            this.InvokeAsync("GetTestHosp", new object[0], this.GetTestHospOperationCompleted, userState);
        }
        
        private void OnGetTestHospOperationCompleted(object arg) {
            if ((this.GetTestHospCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTestHospCompleted(this, new GetTestHospCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SDETools/RemindTools/SetUnitRange", RequestNamespace="http://SDETools/RemindTools/", ResponseNamespace="http://SDETools/RemindTools/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetUnitRange(string Unit, string Hosp) {
            object[] results = this.Invoke("SetUnitRange", new object[] {
                        Unit,
                        Hosp});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetUnitRangeAsync(string Unit, string Hosp) {
            this.SetUnitRangeAsync(Unit, Hosp, null);
        }
        
        /// <remarks/>
        public void SetUnitRangeAsync(string Unit, string Hosp, object userState) {
            if ((this.SetUnitRangeOperationCompleted == null)) {
                this.SetUnitRangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetUnitRangeOperationCompleted);
            }
            this.InvokeAsync("SetUnitRange", new object[] {
                        Unit,
                        Hosp}, this.SetUnitRangeOperationCompleted, userState);
        }
        
        private void OnSetUnitRangeOperationCompleted(object arg) {
            if ((this.SetUnitRangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetUnitRangeCompleted(this, new SetUnitRangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SDETools/RemindTools/GetWorkloadGroup", RequestNamespace="http://SDETools/RemindTools/", ResponseNamespace="http://SDETools/RemindTools/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetWorkloadGroup() {
            object[] results = this.Invoke("GetWorkloadGroup", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetWorkloadGroupAsync() {
            this.GetWorkloadGroupAsync(null);
        }
        
        /// <remarks/>
        public void GetWorkloadGroupAsync(object userState) {
            if ((this.GetWorkloadGroupOperationCompleted == null)) {
                this.GetWorkloadGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWorkloadGroupOperationCompleted);
            }
            this.InvokeAsync("GetWorkloadGroup", new object[0], this.GetWorkloadGroupOperationCompleted, userState);
        }
        
        private void OnGetWorkloadGroupOperationCompleted(object arg) {
            if ((this.GetWorkloadGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWorkloadGroupCompleted(this, new GetWorkloadGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SDETools/RemindTools/GetWorkload", RequestNamespace="http://SDETools/RemindTools/", ResponseNamespace="http://SDETools/RemindTools/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetWorkload(string GroupID, string DT_S, string DT_E) {
            object[] results = this.Invoke("GetWorkload", new object[] {
                        GroupID,
                        DT_S,
                        DT_E});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetWorkloadAsync(string GroupID, string DT_S, string DT_E) {
            this.GetWorkloadAsync(GroupID, DT_S, DT_E, null);
        }
        
        /// <remarks/>
        public void GetWorkloadAsync(string GroupID, string DT_S, string DT_E, object userState) {
            if ((this.GetWorkloadOperationCompleted == null)) {
                this.GetWorkloadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWorkloadOperationCompleted);
            }
            this.InvokeAsync("GetWorkload", new object[] {
                        GroupID,
                        DT_S,
                        DT_E}, this.GetWorkloadOperationCompleted, userState);
        }
        
        private void OnGetWorkloadOperationCompleted(object arg) {
            if ((this.GetWorkloadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWorkloadCompleted(this, new GetWorkloadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SDETools/RemindTools/GetAuthorize", RequestNamespace="http://SDETools/RemindTools/", ResponseNamespace="http://SDETools/RemindTools/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetAuthorize(string Token) {
            object[] results = this.Invoke("GetAuthorize", new object[] {
                        Token});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetAuthorizeAsync(string Token) {
            this.GetAuthorizeAsync(Token, null);
        }
        
        /// <remarks/>
        public void GetAuthorizeAsync(string Token, object userState) {
            if ((this.GetAuthorizeOperationCompleted == null)) {
                this.GetAuthorizeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAuthorizeOperationCompleted);
            }
            this.InvokeAsync("GetAuthorize", new object[] {
                        Token}, this.GetAuthorizeOperationCompleted, userState);
        }
        
        private void OnGetAuthorizeOperationCompleted(object arg) {
            if ((this.GetAuthorizeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAuthorizeCompleted(this, new GetAuthorizeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetEngineerCompletedEventHandler(object sender, GetEngineerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEngineerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEngineerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetRemindListCompletedEventHandler(object sender, GetRemindListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRemindListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRemindListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetDateCompletedEventHandler(object sender, GetDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetTestHospCompletedEventHandler(object sender, GetTestHospCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTestHospCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTestHospCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void SetUnitRangeCompletedEventHandler(object sender, SetUnitRangeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetUnitRangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetUnitRangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetWorkloadGroupCompletedEventHandler(object sender, GetWorkloadGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWorkloadGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWorkloadGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetWorkloadCompletedEventHandler(object sender, GetWorkloadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWorkloadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWorkloadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetAuthorizeCompletedEventHandler(object sender, GetAuthorizeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAuthorizeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAuthorizeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591